# -*- coding: utf-8 -*-
"""COMP257_JiarongPei_a3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KcFNqBKIYs5rzEe1oXXq6quyYkqLqCn8

1. Loading the Olivetti Dataset
"""

from sklearn.datasets import fetch_olivetti_faces

# Load Olivetti Faces dataset
dataset = fetch_olivetti_faces()
X, y = dataset.data, dataset.target

"""2. Splitting the Dataset"""

from sklearn.model_selection import train_test_split

# Split data into training, validation, and test sets with stratification to balance classes
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.4, stratify=y, random_state=42)
X_valid, X_test, y_valid, y_test = train_test_split(X_temp, y_temp, test_size=0.5, stratify=y_temp, random_state=42)

"""3. Training a Random Forest Classifier with Cross-Validation"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score

# Initialize a Random Forest Classifier
model_rf = RandomForestClassifier()

# Perform 5-fold cross-validation
rf_scores = cross_val_score(model_rf, X_train, y_train, cv=5)
print(f"Cross-Validation Accuracy (Random Forest): {rf_scores.mean()}")

"""4. Hierarchical Clustering with Different Distance Metrics

a) Minkowski Distance (p=3)
"""

from sklearn.cluster import AgglomerativeClustering

# Apply Agglomerative Hierarchical Clustering with Minkowski distance
agglo_minkowski = AgglomerativeClustering(n_clusters=40, metric='minkowski', linkage='average', compute_distances=True)
labels_minkowski = agglo_minkowski.fit_predict(X_train)

"""b) Cosine Similarity"""

# Apply Agglomerative Hierarchical Clustering with Cosine similarity
agglo_cosine = AgglomerativeClustering(n_clusters=40, metric='cosine', linkage='average')
labels_cosine = agglo_cosine.fit_predict(X_train)

"""c) Euclidean Distance with Ward Linkage"""

# Apply Agglomerative Clustering with Ward's linkage (only supports Euclidean)
agglo_euclidean = AgglomerativeClustering(n_clusters=40, metric='euclidean', linkage='ward')
labels_euclidean = agglo_euclidean.fit_predict(X_train)

"""5. Silhouette Score Evaluation"""

from sklearn.metrics import silhouette_score

# Calculate Silhouette Scores for each clustering
silhouette_euclidean = silhouette_score(X_train, labels_euclidean)
silhouette_minkowski = silhouette_score(X_train, labels_minkowski)
silhouette_cosine = silhouette_score(X_train, labels_cosine)

# Print out the silhouette scores
print(f"Silhouette Score (Euclidean): {silhouette_euclidean}")
print(f"Silhouette Score (Minkowski): {silhouette_minkowski}")
print(f"Silhouette Score (Cosine): {silhouette_cosine}")

"""6. Classification with Reduced Dimensionality"""

# Train the Random Forest classifier using clusters as input
clf_with_clusters = RandomForestClassifier()

